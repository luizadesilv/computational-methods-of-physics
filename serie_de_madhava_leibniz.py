# -*- coding: utf-8 -*-
"""Serie-de-Madhava-Leibniz _ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1__XmHT6DGxB3oz67tAaNYlo48401hiKm

Prova 1 - Métodos Computacionais da Física A
Luiza Dementshuk da Silva
Cartão 00316060

Série de Madhava de Sangamagrama:

$  {\frac{\pi}{4}} = 1 - {\frac{1}{3}} + {\frac{1}{5}} - {\frac{1}{7}} + ...$

Somatório da Série de Madhava-Leibniz ou Série de Gregory-Leibniz:

$ \sum_{n=0}^{N}\ {\frac{\left (-1^n  \right)}{2n - 1}} $
"""

import matplotlib.pyplot as plt
import numpy as np


def define_termo(n):
  termo = ((-1)**n)/(2*n + 1)
  return termo

def plot_n_0_a_100():
  dn = np.arange(1,101,1)
  serie_n = []
  for i in range(1, 101):
    serie_n.append(define_termo(i))

  #plotando o gráfico
  plt.plot(dn, serie_n)
  plt.title('Série de Madhava-Leibniz variando de 1 a 100')
  plt.xlabel('n')
  plt.ylabel('Termos')
  plt.show()

def soma_termos(n):
  termo = 0
  serie = []
  for j in range(0, n+1):
    termo += define_termo(j)
    serie.append(termo)
  somatorio = serie[n]
  return somatorio

def print_soma(n, soma):
  print(f'A soma de {n} termos foi {soma}!\n')

# Desafio
def soma_duas_casas():
  soma_teste = 0
  cont = 1
  while soma_teste != 0.79:
    soma_teste = round(soma_termos(cont),2)
    cont += cont

  print(f'O Valor exato de {soma_teste} foi obtido somando {cont} termos')


# main
plot_n_0_a_100()

soma50 = soma_termos(50)
print_soma(50, soma50)
soma250 = soma_termos(250)
print_soma(250, soma250)
soma500 = soma_termos(500)
print_soma(500, soma500)

# Para testar o desafio, chamar a função soma_duas_casas()
soma_duas_casas()

"""Conclusão:

Quanto mais termos são somados à sequência, mais a soma desses termos convergem para o valor de real de ${\frac{\pi}{4}}$, que é de 0.785398163, aproximadamente. 

Com os 500 termos, por exemplo, o erro é percebido a partir da terceira cada decimal. Já com 250 termos, o erro é percebido já na segunda casa.  

-> Para fazer o desafio proposto, foi elaborada a função soma_duas_casas, que busca somar termos até encontrar o valor exato de duas casas decimais. 
"""