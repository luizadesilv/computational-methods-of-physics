# -*- coding: utf-8 -*-
"""Numerical Differentiation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f8NBr1_3Alwr7KPlD5qdsxf5kurWAa7-
"""

import numpy as np
import matplotlib.pyplot as plt


def definir_funcao(x):
  f=(x**3)*np.sin(x)
  return f
def derivada_direita(x, dx):
  f1 = definir_funcao(x)
  f2 = definir_funcao(x + dx)
  f_linha = (f2 - f1)/dx
  return f_linha

def derivada_centrada(x, dx):
  f1 = definir_funcao(x + dx)
  f2 = definir_funcao(x - dx)
  f_linha = (f1 - f2)/(2*dx)
  return f_linha

def grafico_comparativo(derivada, name):
  dx = np.logspace(-16, 0)
  res = []
  for i in dx:
    res.append(derivada(3, i))
  plt.plot(dx, res)
  plt.xscale("log") 
  plt.xlabel("dx")
  plt.ylabel("f'(x)")
  plt.title(name,fontsize=20)
  plt.show()
  
grafico_comparativo(derivada_direita, "Derivada Direita")
grafico_comparativo(derivada_centrada, "Derivada Centrada")

import numpy as np
from scipy.misc import derivative
import matplotlib.pyplot as plt

def derivada_analitica(x):
  f_linha = (3*(x**2)*np.sin(x)) + ((x**3)*np.cos(x))
  return f_linha

def erro_derivada(x, dx, derivada, derivada_analitica):
  f_linha_an = derivada_analitica(x)
  f_linha = derivada(x, dx)
  erro = np.abs((f_linha_an - f_linha)/f_linha_an)
  return erro

def grafico_erro(erro):
  dx = np.logspace(-16, 0)
  erro_direita = []
  erro_centrada = []
  for i in dx:
    erro_direita.append(erro(3, i, derivada_direita, derivada_analitica))
    erro_centrada.append(erro(3, i, derivada_centrada, derivada_analitica))

  plt.plot(dx, erro_direita, color = 'blue')
  plt.plot(dx, erro_centrada, color = 'red')
  plt.xscale("log") 
  plt.yscale("log")
  plt.xlabel("dx")
  plt.ylabel("erro")
  plt.title("Erro da derivada")
  plt.legend(['Erro direita','Erro central'], fontsize=14)
  plt.show()

grafico_erro(erro_derivada)